// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// divide
double divide(double x, double y);
RcppExport SEXP _fdesigns_divide(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(divide(x, y));
    return rcpp_result_gen;
END_RCPP
}
// bs2intcpp
double bs2intcpp(int j, NumericVector t, int pbeta, int px, int dbeta, int dx, NumericVector ex_lambdabeta, NumericVector ex_lambdax);
RcppExport SEXP _fdesigns_bs2intcpp(SEXP jSEXP, SEXP tSEXP, SEXP pbetaSEXP, SEXP pxSEXP, SEXP dbetaSEXP, SEXP dxSEXP, SEXP ex_lambdabetaSEXP, SEXP ex_lambdaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type pbeta(pbetaSEXP);
    Rcpp::traits::input_parameter< int >::type px(pxSEXP);
    Rcpp::traits::input_parameter< int >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< int >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ex_lambdabeta(ex_lambdabetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ex_lambdax(ex_lambdaxSEXP);
    rcpp_result_gen = Rcpp::wrap(bs2intcpp(j, t, pbeta, px, dbeta, dx, ex_lambdabeta, ex_lambdax));
    return rcpp_result_gen;
END_RCPP
}
// bs2jcbcpp
NumericMatrix bs2jcbcpp(NumericVector t, int dbeta, int dx, NumericVector knots_beta, NumericVector knots_x);
RcppExport SEXP _fdesigns_bs2jcbcpp(SEXP tSEXP, SEXP dbetaSEXP, SEXP dxSEXP, SEXP knots_betaSEXP, SEXP knots_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type dbeta(dbetaSEXP);
    Rcpp::traits::input_parameter< int >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots_beta(knots_betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots_x(knots_xSEXP);
    rcpp_result_gen = Rcpp::wrap(bs2jcbcpp(t, dbeta, dx, knots_beta, knots_x));
    return rcpp_result_gen;
END_RCPP
}
// bsintcpp
double bsintcpp(int j, int p, int degree, NumericVector exl, NumericVector t);
RcppExport SEXP _fdesigns_bsintcpp(SEXP jSEXP, SEXP pSEXP, SEXP degreeSEXP, SEXP exlSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exl(exlSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(bsintcpp(j, p, degree, exl, t));
    return rcpp_result_gen;
END_RCPP
}
// jcbfunccpp
NumericMatrix jcbfunccpp(int db, int degree, NumericVector knots, NumericVector t);
RcppExport SEXP _fdesigns_jcbfunccpp(SEXP dbSEXP, SEXP degreeSEXP, SEXP knotsSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type db(dbSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(jcbfunccpp(db, degree, knots, t));
    return rcpp_result_gen;
END_RCPP
}
// Vpowercpp
NumericMatrix Vpowercpp(int db, int tu);
RcppExport SEXP _fdesigns_Vpowercpp(SEXP dbSEXP, SEXP tuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type db(dbSEXP);
    Rcpp::traits::input_parameter< int >::type tu(tuSEXP);
    rcpp_result_gen = Rcpp::wrap(Vpowercpp(db, tu));
    return rcpp_result_gen;
END_RCPP
}
// bsallintcpp
double bsallintcpp(NumericVector t, double j, double nbs, NumericVector allpos, NumericVector alldeg, List exknots);
RcppExport SEXP _fdesigns_bsallintcpp(SEXP tSEXP, SEXP jSEXP, SEXP nbsSEXP, SEXP allposSEXP, SEXP alldegSEXP, SEXP exknotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type nbs(nbsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type allpos(allposSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alldeg(alldegSEXP);
    Rcpp::traits::input_parameter< List >::type exknots(exknotsSEXP);
    rcpp_result_gen = Rcpp::wrap(bsallintcpp(t, j, nbs, allpos, alldeg, exknots));
    return rcpp_result_gen;
END_RCPP
}
// bsplinesecderprodcpp
double bsplinesecderprodcpp(NumericVector t, int degree, NumericVector pos, NumericVector knots);
RcppExport SEXP _fdesigns_bsplinesecderprodcpp(SEXP tSEXP, SEXP degreeSEXP, SEXP posSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos(posSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplinesecderprodcpp(t, degree, pos, knots));
    return rcpp_result_gen;
END_RCPP
}
// Vbsplinecpp
NumericMatrix Vbsplinecpp(double db, double tu, NumericVector knots);
RcppExport SEXP _fdesigns_Vbsplinecpp(SEXP dbSEXP, SEXP tuSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type db(dbSEXP);
    Rcpp::traits::input_parameter< double >::type tu(tuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(Vbsplinecpp(db, tu, knots));
    return rcpp_result_gen;
END_RCPP
}
// bsalljcbcpp
NumericMatrix bsalljcbcpp(NumericVector t, double j, double nbs, NumericMatrix aposx, NumericVector alldeg, List allknotsxb, NumericVector nx, double nb);
RcppExport SEXP _fdesigns_bsalljcbcpp(SEXP tSEXP, SEXP jSEXP, SEXP nbsSEXP, SEXP aposxSEXP, SEXP alldegSEXP, SEXP allknotsxbSEXP, SEXP nxSEXP, SEXP nbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type nbs(nbsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type aposx(aposxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alldeg(alldegSEXP);
    Rcpp::traits::input_parameter< List >::type allknotsxb(allknotsxbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< double >::type nb(nbSEXP);
    rcpp_result_gen = Rcpp::wrap(bsalljcbcpp(t, j, nbs, aposx, alldeg, allknotsxb, nx, nb));
    return rcpp_result_gen;
END_RCPP
}
// bsalljcbpowercpp
NumericMatrix bsalljcbpowercpp(NumericVector t, double j, double nbs, NumericMatrix aposx, NumericVector alldegx, List allknotsx, NumericVector nx, double nb);
RcppExport SEXP _fdesigns_bsalljcbpowercpp(SEXP tSEXP, SEXP jSEXP, SEXP nbsSEXP, SEXP aposxSEXP, SEXP alldegxSEXP, SEXP allknotsxSEXP, SEXP nxSEXP, SEXP nbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type nbs(nbsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type aposx(aposxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alldegx(alldegxSEXP);
    Rcpp::traits::input_parameter< List >::type allknotsx(allknotsxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< double >::type nb(nbSEXP);
    rcpp_result_gen = Rcpp::wrap(bsalljcbpowercpp(t, j, nbs, aposx, alldegx, allknotsx, nx, nb));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP linearcppaopt(SEXP, SEXP);
RcppExport SEXP linearcppdopt(SEXP, SEXP);
RcppExport SEXP logisticcppaopt(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP logisticcppdopt(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP poissoncppdopt(SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_fdesigns_divide", (DL_FUNC) &_fdesigns_divide, 2},
    {"_fdesigns_bs2intcpp", (DL_FUNC) &_fdesigns_bs2intcpp, 8},
    {"_fdesigns_bs2jcbcpp", (DL_FUNC) &_fdesigns_bs2jcbcpp, 5},
    {"_fdesigns_bsintcpp", (DL_FUNC) &_fdesigns_bsintcpp, 5},
    {"_fdesigns_jcbfunccpp", (DL_FUNC) &_fdesigns_jcbfunccpp, 4},
    {"_fdesigns_Vpowercpp", (DL_FUNC) &_fdesigns_Vpowercpp, 2},
    {"_fdesigns_bsallintcpp", (DL_FUNC) &_fdesigns_bsallintcpp, 6},
    {"_fdesigns_bsplinesecderprodcpp", (DL_FUNC) &_fdesigns_bsplinesecderprodcpp, 4},
    {"_fdesigns_Vbsplinecpp", (DL_FUNC) &_fdesigns_Vbsplinecpp, 3},
    {"_fdesigns_bsalljcbcpp", (DL_FUNC) &_fdesigns_bsalljcbcpp, 8},
    {"_fdesigns_bsalljcbpowercpp", (DL_FUNC) &_fdesigns_bsalljcbpowercpp, 8},
    {"linearcppaopt",   (DL_FUNC) &linearcppaopt,   2},
    {"linearcppdopt",   (DL_FUNC) &linearcppdopt,   2},
    {"logisticcppaopt", (DL_FUNC) &logisticcppaopt, 4},
    {"logisticcppdopt", (DL_FUNC) &logisticcppdopt, 4},
    {"poissoncppdopt",  (DL_FUNC) &poissoncppdopt,  4},
    {NULL, NULL, 0}
};

RcppExport void R_init_fdesigns(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
